---
- name: Initialise kubeadm cluster
  when:
    - inventory_hostname in groups["k8s_cp_first_node"]
  block:
    - name: Check if kubernetes already configured
      ansible.builtin.find:
        paths: /var/lib/kubelet
        patterns: config.yaml
      register: kubelet_setup

    - name: End if already configured
      ansible.builtin.meta: end_host
      when:
        - kubelet_setup.matched > 0

    - name: Configure kube-vip
      ansible.builtin.shell: |
        mkdir -p /etc/kubernetes/manifests
        export VIP="{{ control_plane_ip }}"
        export INTERFACE=eth0
        KVVERSION=$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name")
        alias kube-vip="ctr image pull ghcr.io/kube-vip/kube-vip:$KVVERSION; ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:$KVVERSION vip /kube-vip"
        kube-vip manifest pod --interface $INTERFACE --address $VIP --controlplane --services --arp --leaderElection | tee /etc/kubernetes/manifests/kube-vip.yaml
        sed -i 's#path: /etc/kubernetes/admin.conf#path: /etc/kubernetes/super-admin.conf#' /etc/kubernetes/manifests/kube-vip.yaml

    - name: Generate kubeadm token
      ansible.builtin.shell:
        kubeadm token generate
      register: kubeadm_token

    - name: Generate kubeadm certificate key
      ansible.builtin.shell:
        kubeadm certs certificate-key
      register: kubeadm_cert_key

    - name: Initialize kubeadm cluster
      ansible.builtin.shell: >
        kubeadm init --control-plane-endpoint "{{ control_plane_endpoint }}"
        --pod-network-cidr="{{ pod_network_cidr }}"
        --service-cidr="{{ service_network_cidr }}"
        --token="{{ kubeadm_token.stdout }}"
        --certificate-key="{{ kubeadm_cert_key.stdout }}"
        --upload-certs

    - name: Copy kube.config file
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/
